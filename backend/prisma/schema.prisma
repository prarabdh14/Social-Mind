// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEAM_MEMBER
  CLIENT
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum ThemePreference {
  LIGHT
  DARK
}

model User {
  id                String            @id @default(uuid())
  fullName          String
  email             String            @unique
  avatarUrl         String?
  accountStatus     AccountStatus     @default(ACTIVE)
  role              UserRole          @default(CLIENT)
  lastLoginAt       DateTime?
  loginAttempts     Int               @default(0)
  sessionToken      String?
  refreshToken      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  password          String
  profilePicture    String?

  // Relations
  organization      Organization?      @relation(fields: [organizationId], references: [id])
  organizationId    String?
  preferences       UserPreference?
  socialAccounts    SocialMediaAccount[]
}

model Organization {
  id          String    @id @default(uuid())
  name        String
  logoUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  users       User[]
}

model UserPreference {
  id                    String          @id @default(uuid())
  theme                 ThemePreference @default(LIGHT)
  dashboardLayout       Json?           // Stores custom widget arrangement
  emailNotifications    Boolean         @default(true)
  inAppNotifications    Boolean         @default(true)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String          @unique
}

model SocialMediaAccount {
  id              String    @id @default(uuid())
  platform        String    // e.g., "Instagram", "Twitter", "LinkedIn"
  username        String
  profilePicture  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}
